apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: prometheus
  namespace: argocd
  labels:
    apps: utilities 

spec:
  project: default
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 76.5.1
    chart: kube-prometheus-stack
    
    helm:
      values: |
          kubeEtcd:
            endpoints:
              - 192.168.100.52
              - 192.168.100.53
              - 192.168.100.162
          kubeApiServer:
            enabled: false
          kubeScheduler:
            enabled: false
          kubeControllerManager:
            enabled: false
          kubeProxy:
            enabled: false
          kubelet:
            serviceMonitor:
              metricRelabelings:
                # k3s exposes all metrics on all endpoints, relabel jobs that belong to other components
                - sourceLabels: [__name__]
                  regex: "scheduler_(.+)"
                  targetLabel: "job"
                  replacement: "kube-scheduler"
                  action: replace
                - sourceLabels: [__name__]
                  regex: "kubeproxy_(.+)"
                  targetLabel: "job"
                  replacement: "kube-proxy"
                  action: replace
          alertmanager:
            alertmanagerSpec:
              replicas: 2
              tolerations:
                - key: node-role.kubernetes.io/master
                  operator: "Equal"
                  value: "true"
                  effect: "NoSchedule"
              affinity:
                nodeAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - weight: 1
                    preference:
                      matchExpressions:
                      - key: node-role.kubernetes.io/control-plane
                        operator: In
                        values: 
                        - "true"
            config:
              global:
                resolve_timeout: 5m

              route:
                receiver: "telegram"
                group_by: ["alertname", "namespace"]
                group_wait: 30s
                group_interval: 5m
                repeat_interval: 12h

              receivers:
                - name: "telegram"
                  telegram_configs:
                    - bot_token: "<path:k8s/data/argocd/grafana#telegram_api_token>"
                      chat_id: <path:k8s/data/argocd/grafana#telegram_chat_id>
                      parse_mode: "HTML"
                      message: |
                        ðŸš¨ <b>{{ .CommonAnnotations.summary }}</b>
                        {{ range .Alerts }}
                        Namespace: {{ .Labels.namespace }}
                        Pod: {{ .Labels.pod }}
                        Severity: {{ .Labels.severity }}
                        Description: {{ .Annotations.description }}
                        {{ end }}
                      send_resolved: true

          grafana:
            additionalDataSources:
              - name: loki
                type: loki
                access: proxy
                basicAuth: false
                url: http://loki-gateway.loki
                jsonData:
                  timeout: 300
                  maxLines: 1000
            persistence:
              enabled: true
              type: sts
              storageClassName: longhorn
            ingress:
              enabled: true
              annotations:
                cert-manager.io/cluster-issuer: cluster-ca-issuer
                traefik.ingress.kubernetes.io/router.entrypoints: websecure
              hosts:
              - grafana-k3s.lab.smig.tech
              tls:
              - secretName: smigtech-grafana-tls
                hosts:
                - grafana-k3s.lab.smig.tech
            # using argocd vault plugin so yeah
            assertNoLeakedSecrets: false
            grafana.ini:
              auth:
                  signout_redirect_url: "https://auth.thecodedom.com/application/o/grafana-k3s/end-session/"
                  oauth_auto_login: true
              auth.generic_oauth:
                  name: authentik
                  enabled: true
                  client_id: <path:k8s/data/argocd/authentik-grafana#clientId>
                  client_secret: <path:k8s/data/argocd/authentik-grafana#clientSecret>
                  scopes: "openid profile email"
                  auth_url: "https://auth.thecodedom.com/application/o/authorize/"
                  token_url: "https://auth.thecodedom.com/application/o/token/"
                  api_url: "https://auth.thecodedom.com/application/o/userinfo/"
                  # Optionally map user groups to Grafana roles
                  role_attribute_path: contains(groups, 'Grafana Admins') && 'Admin' || contains(groups, 'Grafana Editors') && 'Editor' || 'Viewer'
              server:
                root_url: "https://grafana-k3s.lab.smig.tech"
          prometheus:
            prometheusSpec:
              podMonitorSelectorNilUsesHelmValues: false
              serviceMonitorSelectorNilUsesHelmValues: false
              tolerations:
                - key: node-role.kubernetes.io/master
                  operator: "Equal"
                  value: "true"
                  effect: "NoSchedule"
              affinity:
                nodeAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - weight: 1
                    preference:
                      matchExpressions:
                      - key: node-role.kubernetes.io/control-plane
                        operator: In
                        values: 
                        - "true"

  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring

  syncPolicy:
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
    automated:
      selfHeal: true
      prune: true

